name: citra-ci

on:
  push:
    branches: [ "*" ]
    tags: [ "*" ]
  pull_request:
    branches: [ 1782 ]

jobs:
  # clang-format:
  #   runs-on: ubuntu-latest
  #   container: citraemu/build-environments:linux-clang-format
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Build
  #       env:
  #         COMMIT_RANGE: ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}
  #       run: ./.ci/linux-clang-format/docker.sh
  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ~/.buildcache
          key: ${{ runner.os }}-win-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-win-
      - name: Install dependencies
        run: ./.ci/windows-msvc/deps.sh
        shell: bash
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
      - name: Build
        run: ./.ci/windows-msvc/build.sh
        shell: bash
        env:
          ENABLE_COMPATIBILITY_REPORTING: "OFF"
  # transifex:
  #   runs-on: ubuntu-latest
  #   container: citraemu/build-environments:linux-transifex
  #   if: ${{ github.repository == 'citra-emu/citra' && !github.head_ref }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: recursive
  #     - name: Update Translation
  #       run: ./.ci/transifex/docker.sh
  #       env:
  #         TRANSIFEX_API_TOKEN: ${{ secrets.TRANSIFEX_API_TOKEN }}
  release:
    runs-on: ubuntu-latest
    needs: [windows]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/download-artifact@v4
      - name: Query tag name
        uses: little-core-labs/get-git-tag@v4.0.2
        id: tagName
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tagName.outputs.tag }}
          release_name: ${{ steps.tagName.outputs.tag }}
          draft: false
          prerelease: false
      - name: Upload artifacts
        uses: alexellis/upload-assets@0.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_paths: '["./**/*.tar.*","./**/*.7z","./**/*.zip","./**/*.apk","./**/*.aab"]'
